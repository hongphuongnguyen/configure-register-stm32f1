
Configure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000564  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000694  08000694  00010694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006a4  080006a4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080006a4  080006a4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a4  080006a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a4  080006a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006a8  080006a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080006b0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080006b0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014d5  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000615  00000000  00000000  00021502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  00021b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00021c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001138f  00000000  00000000  00021ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e58  00000000  00000000  0003306f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000588d0  00000000  00000000  00034ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008d797  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000258  00000000  00000000  0008d7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	0800067c 	.word	0x0800067c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	0800067c 	.word	0x0800067c

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db0a      	blt.n	80001d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	490c      	ldr	r1, [pc, #48]	; (80001f4 <__NVIC_SetPriority+0x4c>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	0112      	lsls	r2, r2, #4
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d0:	e00a      	b.n	80001e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4908      	ldr	r1, [pc, #32]	; (80001f8 <__NVIC_SetPriority+0x50>)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	3b04      	subs	r3, #4
 80001e0:	0112      	lsls	r2, r2, #4
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	440b      	add	r3, r1
 80001e6:	761a      	strb	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <EXTIConfigure>:
#include "EXTI.h"

void EXTIConfigure(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	/* GPIOA_0 EXTI Line 0 Falling */
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000200:	4b22      	ldr	r3, [pc, #136]	; (800028c <EXTIConfigure+0x90>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a21      	ldr	r2, [pc, #132]	; (800028c <EXTIConfigure+0x90>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]

	GPIOA->CRL &=~ (3UL << 0); 					// Input mode
 800020c:	4b20      	ldr	r3, [pc, #128]	; (8000290 <EXTIConfigure+0x94>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1f      	ldr	r2, [pc, #124]	; (8000290 <EXTIConfigure+0x94>)
 8000212:	f023 0303 	bic.w	r3, r3, #3
 8000216:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &=~ (3UL << 2);					// Clear
 8000218:	4b1d      	ldr	r3, [pc, #116]	; (8000290 <EXTIConfigure+0x94>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a1c      	ldr	r2, [pc, #112]	; (8000290 <EXTIConfigure+0x94>)
 800021e:	f023 030c 	bic.w	r3, r3, #12
 8000222:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (2UL << 2);					// Input pull up/down
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <EXTIConfigure+0x94>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <EXTIConfigure+0x94>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= (1UL << 0); 					// PA0 Input PullUp
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <EXTIConfigure+0x94>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	4a16      	ldr	r2, [pc, #88]	; (8000290 <EXTIConfigure+0x94>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	60d3      	str	r3, [r2, #12]

	/* AFIO Configure */
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 800023c:	4b13      	ldr	r3, [pc, #76]	; (800028c <EXTIConfigure+0x90>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a12      	ldr	r2, [pc, #72]	; (800028c <EXTIConfigure+0x90>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6193      	str	r3, [r2, #24]

	AFIO->EXTICR[0] &=~ (15UL << 0);			// PA[x] Pin selected as the source input for EXTI0
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <EXTIConfigure+0x98>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a11      	ldr	r2, [pc, #68]	; (8000294 <EXTIConfigure+0x98>)
 800024e:	f023 030f 	bic.w	r3, r3, #15
 8000252:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= (1UL << 0);					// Interrupt request from Line 0 is not masked
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <EXTIConfigure+0x9c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a0f      	ldr	r2, [pc, #60]	; (8000298 <EXTIConfigure+0x9c>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6013      	str	r3, [r2, #0]
	EXTI->RTSR &=~ (1UL << 0);					// Rising trigger disabled of Line 0
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <EXTIConfigure+0x9c>)
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <EXTIConfigure+0x9c>)
 8000266:	f023 0301 	bic.w	r3, r3, #1
 800026a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= (1UL << 0);					// Falling trigger enabled of Line 0
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <EXTIConfigure+0x9c>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	4a09      	ldr	r2, [pc, #36]	; (8000298 <EXTIConfigure+0x9c>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	60d3      	str	r3, [r2, #12]

	__NVIC_SetPriority(EXTI0_IRQn, 0);			// Set priority of EXTI_IRQn is 0
 8000278:	2100      	movs	r1, #0
 800027a:	2006      	movs	r0, #6
 800027c:	f7ff ff94 	bl	80001a8 <__NVIC_SetPriority>
	__NVIC_EnableIRQ(EXTI0_IRQn);				// Enable EXTI0
 8000280:	2006      	movs	r0, #6
 8000282:	f7ff ff75 	bl	8000170 <__NVIC_EnableIRQ>
}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000
 8000290:	40010800 	.word	0x40010800
 8000294:	40010000 	.word	0x40010000
 8000298:	40010400 	.word	0x40010400

0800029c <GPIOConfig>:
#include "GPIOConfigure.h"

void GPIOConfig(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	/* GPIOC_13 */
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80002a0:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <GPIOConfig+0x54>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <GPIOConfig+0x54>)
 80002a6:	f043 0310 	orr.w	r3, r3, #16
 80002aa:	6193      	str	r3, [r2, #24]

	GPIOC->CRH |= (3UL << 20);					// Output mode, max speed 50MHz
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <GPIOConfig+0x58>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	4a10      	ldr	r2, [pc, #64]	; (80002f4 <GPIOConfig+0x58>)
 80002b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80002b6:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(3UL << 22);					// General purpose push-pull
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <GPIOConfig+0x58>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <GPIOConfig+0x58>)
 80002be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80002c2:	6053      	str	r3, [r2, #4]

	/* Button chan GPIOC_14 */
	GPIOC->CRH &=~ (3UL << 24); 				// Input mode
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <GPIOConfig+0x58>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <GPIOConfig+0x58>)
 80002ca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002ce:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (2UL << 26);					// Input pull up/down
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <GPIOConfig+0x58>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <GPIOConfig+0x58>)
 80002d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80002da:	6053      	str	r3, [r2, #4]
	GPIOC->ODR |= (1 << 14);					// GPIOC-14 is pull-up
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <GPIOConfig+0x58>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <GPIOConfig+0x58>)
 80002e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002e6:	60d3      	str	r3, [r2, #12]

}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40011000 	.word	0x40011000

080002f8 <__NVIC_SetPriority>:
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b00      	cmp	r3, #0
 800030a:	db0a      	blt.n	8000322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b2da      	uxtb	r2, r3
 8000310:	490c      	ldr	r1, [pc, #48]	; (8000344 <__NVIC_SetPriority+0x4c>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	0112      	lsls	r2, r2, #4
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	440b      	add	r3, r1
 800031c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000320:	e00a      	b.n	8000338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4908      	ldr	r1, [pc, #32]	; (8000348 <__NVIC_SetPriority+0x50>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	f003 030f 	and.w	r3, r3, #15
 800032e:	3b04      	subs	r3, #4
 8000330:	0112      	lsls	r2, r2, #4
 8000332:	b2d2      	uxtb	r2, r2
 8000334:	440b      	add	r3, r1
 8000336:	761a      	strb	r2, [r3, #24]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000e100 	.word	0xe000e100
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3b01      	subs	r3, #1
 8000358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800035c:	d301      	bcc.n	8000362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800035e:	2301      	movs	r3, #1
 8000360:	e00f      	b.n	8000382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <SysTick_Config+0x40>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3b01      	subs	r3, #1
 8000368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800036a:	210f      	movs	r1, #15
 800036c:	f04f 30ff 	mov.w	r0, #4294967295
 8000370:	f7ff ffc2 	bl	80002f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <SysTick_Config+0x40>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800037a:	4b04      	ldr	r3, [pc, #16]	; (800038c <SysTick_Config+0x40>)
 800037c:	2207      	movs	r2, #7
 800037e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000380:	2300      	movs	r3, #0
}
 8000382:	4618      	mov	r0, r3
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	e000e010 	.word	0xe000e010

08000390 <systemClockConfig>:
#include "SYS.h"

volatile uint32_t Tick;
void systemClockConfig(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSION; 									// Internal clock
 8000394:	4b34      	ldr	r3, [pc, #208]	; (8000468 <systemClockConfig+0xd8>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a33      	ldr	r2, [pc, #204]	; (8000468 <systemClockConfig+0xd8>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY));							// Wait HSIRDY flag is set
 80003a0:	bf00      	nop
 80003a2:	4b31      	ldr	r3, [pc, #196]	; (8000468 <systemClockConfig+0xd8>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f003 0302 	and.w	r3, r3, #2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0f9      	beq.n	80003a2 <systemClockConfig+0x12>

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;							// Power interface enable
 80003ae:	4b2e      	ldr	r3, [pc, #184]	; (8000468 <systemClockConfig+0xd8>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a2d      	ldr	r2, [pc, #180]	; (8000468 <systemClockConfig+0xd8>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b8:	61d3      	str	r3, [r2, #28]

	FLASH->ACR |= FLASH_ACR_PRFTBE;								// Enable flash memory
 80003ba:	4b2c      	ldr	r3, [pc, #176]	; (800046c <systemClockConfig+0xdc>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a2b      	ldr	r2, [pc, #172]	; (800046c <systemClockConfig+0xdc>)
 80003c0:	f043 0310 	orr.w	r3, r3, #16
 80003c4:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;							// Latency = 010 -> 48MHz <= SYSCLK <= 72MHz
 80003c6:	4b29      	ldr	r3, [pc, #164]	; (800046c <systemClockConfig+0xdc>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a28      	ldr	r2, [pc, #160]	; (800046c <systemClockConfig+0xdc>)
 80003cc:	f043 0302 	orr.w	r3, r3, #2
 80003d0:	6013      	str	r3, [r2, #0]
	while(!(FLASH->ACR &FLASH_ACR_PRFTBS));						// Wait PRFTBS flag is set
 80003d2:	bf00      	nop
 80003d4:	4b25      	ldr	r3, [pc, #148]	; (800046c <systemClockConfig+0xdc>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f003 0320 	and.w	r3, r3, #32
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0f9      	beq.n	80003d4 <systemClockConfig+0x44>

	RCC->CFGR |= RCC_CFGR_PLLMULL16;							// Bo PLL nhan 16
 80003e0:	4b21      	ldr	r3, [pc, #132]	; (8000468 <systemClockConfig+0xd8>)
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	4a20      	ldr	r2, [pc, #128]	; (8000468 <systemClockConfig+0xd8>)
 80003e6:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80003ea:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;							// He so chia cua AHP la 1
 80003ec:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <systemClockConfig+0xd8>)
 80003ee:	4a1e      	ldr	r2, [pc, #120]	; (8000468 <systemClockConfig+0xd8>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;							// He so chia cua APB1 la 2
 80003f4:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <systemClockConfig+0xd8>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	4a1b      	ldr	r2, [pc, #108]	; (8000468 <systemClockConfig+0xd8>)
 80003fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003fe:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;							// he so chia cua APB2 la 1
 8000400:	4b19      	ldr	r3, [pc, #100]	; (8000468 <systemClockConfig+0xd8>)
 8000402:	4a19      	ldr	r2, [pc, #100]	; (8000468 <systemClockConfig+0xd8>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	6053      	str	r3, [r2, #4]

	RCC->CFGR &=~ RCC_CFGR_PLLSRC;								// HSI clock selected as PLL input clock
 8000408:	4b17      	ldr	r3, [pc, #92]	; (8000468 <systemClockConfig+0xd8>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	4a16      	ldr	r2, [pc, #88]	; (8000468 <systemClockConfig+0xd8>)
 800040e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000412:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;									// PLL enable
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <systemClockConfig+0xd8>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a13      	ldr	r2, [pc, #76]	; (8000468 <systemClockConfig+0xd8>)
 800041a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800041e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR&RCC_CR_PLLRDY));							// Wait PLLRDY flag is set
 8000420:	bf00      	nop
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <systemClockConfig+0xd8>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f9      	beq.n	8000422 <systemClockConfig+0x92>
	RCC->CFGR |= RCC_CFGR_SW_PLL;								// PLLCLK clock selected as SYSCLK input clock
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <systemClockConfig+0xd8>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <systemClockConfig+0xd8>)
 8000434:	f043 0302 	orr.w	r3, r3, #2
 8000438:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)); 					// Wait SWS_PLL flag is set
 800043a:	bf00      	nop
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <systemClockConfig+0xd8>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	f003 0308 	and.w	r3, r3, #8
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f9      	beq.n	800043c <systemClockConfig+0xac>

	SystemInit();												// Thiet lap he thong
 8000448:	f000 f852 	bl	80004f0 <SystemInit>
	SystemCoreClockUpdate();									// Update cac gia tri tren vao he thong
 800044c:	f000 f856 	bl	80004fc <SystemCoreClockUpdate>

	/* System Tick la bo dem xuong, moi khi den 0 thi se co ngat systemtick xay ra */
	/* Sau khi thiet lap cac gia tri tren, SystemCoreClock duoc thiet lap */
	/* Chia 1000 de thiet lap moi xung nhip la 1 ms */
	SysTick_Config(SystemCoreClock/1000UL);
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <systemClockConfig+0xe0>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a07      	ldr	r2, [pc, #28]	; (8000474 <systemClockConfig+0xe4>)
 8000456:	fba2 2303 	umull	r2, r3, r2, r3
 800045a:	099b      	lsrs	r3, r3, #6
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff75 	bl	800034c <SysTick_Config>

}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000
 800046c:	40022000 	.word	0x40022000
 8000470:	20000000 	.word	0x20000000
 8000474:	10624dd3 	.word	0x10624dd3

08000478 <SysTick_Handler>:

// Ham xu ly ngat cua systemtick
void SysTick_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	Tick++;
 800047c:	4b04      	ldr	r3, [pc, #16]	; (8000490 <SysTick_Handler+0x18>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3301      	adds	r3, #1
 8000482:	4a03      	ldr	r2, [pc, #12]	; (8000490 <SysTick_Handler+0x18>)
 8000484:	6013      	str	r3, [r2, #0]
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000020 	.word	0x20000020

08000494 <main>:
#include "GPIOConfigure.h"
#include "SYS.h"
#include "EXTI.h"

int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	systemClockConfig();
 8000498:	f7ff ff7a 	bl	8000390 <systemClockConfig>
	GPIOConfig();
 800049c:	f7ff fefe 	bl	800029c <GPIOConfig>
	EXTIConfigure();
 80004a0:	f7ff feac 	bl	80001fc <EXTIConfigure>

	GPIOC->BSRR |= (1<<13);
 80004a4:	4b03      	ldr	r3, [pc, #12]	; (80004b4 <main+0x20>)
 80004a6:	691b      	ldr	r3, [r3, #16]
 80004a8:	4a02      	ldr	r2, [pc, #8]	; (80004b4 <main+0x20>)
 80004aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ae:	6113      	str	r3, [r2, #16]
    while(1)
 80004b0:	e7fe      	b.n	80004b0 <main+0x1c>
 80004b2:	bf00      	nop
 80004b4:	40011000 	.word	0x40011000

080004b8 <EXTI0_IRQHandler>:
    		GPIOC->BSRR |= (1<<29);
    	*/
    }
}
void EXTI0_IRQHandler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<0))
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <EXTI0_IRQHandler+0x30>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d00b      	beq.n	80004e0 <EXTI0_IRQHandler+0x28>
	{
		/* Neu co ngat Line 0 xay ra va chua duoc xu ly */
		GPIOC->BSRR |= (1<<29);
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <EXTI0_IRQHandler+0x34>)
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <EXTI0_IRQHandler+0x34>)
 80004ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004d2:	6113      	str	r3, [r2, #16]
		EXTI->PR |= (1<<0); // Sau khi hoan thanh cv thi phai xoa co PR tuong ung
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <EXTI0_IRQHandler+0x30>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	4a03      	ldr	r2, [pc, #12]	; (80004e8 <EXTI0_IRQHandler+0x30>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6153      	str	r3, [r2, #20]
	}
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	40010400 	.word	0x40010400
 80004ec:	40011000 	.word	0x40011000

080004f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800050e:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <SystemCoreClockUpdate+0xd0>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	f003 030c 	and.w	r3, r3, #12
 8000516:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	2b08      	cmp	r3, #8
 800051c:	d011      	beq.n	8000542 <SystemCoreClockUpdate+0x46>
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	2b08      	cmp	r3, #8
 8000522:	d83a      	bhi.n	800059a <SystemCoreClockUpdate+0x9e>
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d003      	beq.n	8000532 <SystemCoreClockUpdate+0x36>
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	2b04      	cmp	r3, #4
 800052e:	d004      	beq.n	800053a <SystemCoreClockUpdate+0x3e>
 8000530:	e033      	b.n	800059a <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000532:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <SystemCoreClockUpdate+0xd4>)
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemCoreClockUpdate+0xd8>)
 8000536:	601a      	str	r2, [r3, #0]
      break;
 8000538:	e033      	b.n	80005a2 <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <SystemCoreClockUpdate+0xd4>)
 800053c:	4a25      	ldr	r2, [pc, #148]	; (80005d4 <SystemCoreClockUpdate+0xd8>)
 800053e:	601a      	str	r2, [r3, #0]
      break;
 8000540:	e02f      	b.n	80005a2 <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000542:	4b22      	ldr	r3, [pc, #136]	; (80005cc <SystemCoreClockUpdate+0xd0>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800054a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <SystemCoreClockUpdate+0xd0>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000554:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	0c9b      	lsrs	r3, r3, #18
 800055a:	3302      	adds	r3, #2
 800055c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d106      	bne.n	8000572 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <SystemCoreClockUpdate+0xdc>)
 8000568:	fb02 f303 	mul.w	r3, r2, r3
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <SystemCoreClockUpdate+0xd4>)
 800056e:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000570:	e017      	b.n	80005a2 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <SystemCoreClockUpdate+0xd0>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057a:	2b00      	cmp	r3, #0
 800057c:	d006      	beq.n	800058c <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <SystemCoreClockUpdate+0xdc>)
 8000582:	fb02 f303 	mul.w	r3, r2, r3
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <SystemCoreClockUpdate+0xd4>)
 8000588:	6013      	str	r3, [r2, #0]
      break;
 800058a:	e00a      	b.n	80005a2 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <SystemCoreClockUpdate+0xd8>)
 8000590:	fb02 f303 	mul.w	r3, r2, r3
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <SystemCoreClockUpdate+0xd4>)
 8000596:	6013      	str	r3, [r2, #0]
      break;
 8000598:	e003      	b.n	80005a2 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <SystemCoreClockUpdate+0xd4>)
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <SystemCoreClockUpdate+0xd8>)
 800059e:	601a      	str	r2, [r3, #0]
      break;
 80005a0:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <SystemCoreClockUpdate+0xd0>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	091b      	lsrs	r3, r3, #4
 80005a8:	f003 030f 	and.w	r3, r3, #15
 80005ac:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <SystemCoreClockUpdate+0xe0>)
 80005ae:	5cd3      	ldrb	r3, [r2, r3]
 80005b0:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <SystemCoreClockUpdate+0xd4>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	fa22 f303 	lsr.w	r3, r2, r3
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <SystemCoreClockUpdate+0xd4>)
 80005be:	6013      	str	r3, [r2, #0]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000
 80005d0:	20000000 	.word	0x20000000
 80005d4:	007a1200 	.word	0x007a1200
 80005d8:	003d0900 	.word	0x003d0900
 80005dc:	08000694 	.word	0x08000694

080005e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e4:	f7ff ff84 	bl	80004f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <LoopForever+0x6>)
  ldr r1, =_edata
 80005ea:	490d      	ldr	r1, [pc, #52]	; (8000620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <LoopForever+0xe>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000600:	4c0a      	ldr	r4, [pc, #40]	; (800062c <LoopForever+0x16>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800060e:	f000 f811 	bl	8000634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000612:	f7ff ff3f 	bl	8000494 <main>

08000616 <LoopForever>:

LoopForever:
    b LoopForever
 8000616:	e7fe      	b.n	8000616 <LoopForever>
  ldr   r0, =_estack
 8000618:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000624:	080006ac 	.word	0x080006ac
  ldr r2, =_sbss
 8000628:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800062c:	20000024 	.word	0x20000024

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>
	...

08000634 <__libc_init_array>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	2600      	movs	r6, #0
 8000638:	4d0c      	ldr	r5, [pc, #48]	; (800066c <__libc_init_array+0x38>)
 800063a:	4c0d      	ldr	r4, [pc, #52]	; (8000670 <__libc_init_array+0x3c>)
 800063c:	1b64      	subs	r4, r4, r5
 800063e:	10a4      	asrs	r4, r4, #2
 8000640:	42a6      	cmp	r6, r4
 8000642:	d109      	bne.n	8000658 <__libc_init_array+0x24>
 8000644:	f000 f81a 	bl	800067c <_init>
 8000648:	2600      	movs	r6, #0
 800064a:	4d0a      	ldr	r5, [pc, #40]	; (8000674 <__libc_init_array+0x40>)
 800064c:	4c0a      	ldr	r4, [pc, #40]	; (8000678 <__libc_init_array+0x44>)
 800064e:	1b64      	subs	r4, r4, r5
 8000650:	10a4      	asrs	r4, r4, #2
 8000652:	42a6      	cmp	r6, r4
 8000654:	d105      	bne.n	8000662 <__libc_init_array+0x2e>
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f855 3b04 	ldr.w	r3, [r5], #4
 800065c:	4798      	blx	r3
 800065e:	3601      	adds	r6, #1
 8000660:	e7ee      	b.n	8000640 <__libc_init_array+0xc>
 8000662:	f855 3b04 	ldr.w	r3, [r5], #4
 8000666:	4798      	blx	r3
 8000668:	3601      	adds	r6, #1
 800066a:	e7f2      	b.n	8000652 <__libc_init_array+0x1e>
 800066c:	080006a4 	.word	0x080006a4
 8000670:	080006a4 	.word	0x080006a4
 8000674:	080006a4 	.word	0x080006a4
 8000678:	080006a8 	.word	0x080006a8

0800067c <_init>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	bf00      	nop
 8000680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000682:	bc08      	pop	{r3}
 8000684:	469e      	mov	lr, r3
 8000686:	4770      	bx	lr

08000688 <_fini>:
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068a:	bf00      	nop
 800068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068e:	bc08      	pop	{r3}
 8000690:	469e      	mov	lr, r3
 8000692:	4770      	bx	lr
